{% extends 'base.html.twig' %}

{% block title %}Nouvelle dépense{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('assets/css/bootstrap.min.css') }}" />
    <link rel="stylesheet" href="{{ asset('assets/css/plugins.min.css') }}" />
    <link rel="stylesheet" href="{{ asset('assets/css/kaiadmin.min.css') }}" />
    <link rel="stylesheet" href="{{ asset('assets/css/demo.css') }}" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="{{ asset('assets/css/formfindep.css') }}"/>

    <style>
    /* Styles des messages d'erreur */
.error-message {
    color: #dc3545;
    font-size: 14px;
    margin-top: 5px;
    padding: 3px 3px;
    background-color: #f8d7da;
    border-radius: 4px;
    border-left: 3px solid #dc3545;
    display: none;
}

/* Affichage des erreurs */
.is-invalid ~ .error-message,
.is-invalid + .error-message,
.was-validated .form-control:invalid ~ .error-message {
    display: block;
    animation: fadeIn 0.3s ease-out;
}

/* Style des champs invalides */
.is-invalid,
.was-validated .form-control:invalid {
    border-color: #dc3545 !important;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    padding-right: 2.5rem;
}

/* Animation pour l'apparition des messages */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-5px); }
    to { opacity: 1; transform: translateY(0); }
}


    .form-control::placeholder {
        color:rgb(176, 182, 192);
        opacity: 1; /* Firefox */
        font-size: 14px;
    }
.main-container {
            background: linear-gradient(135deg,rgb(243, 245, 254) 0%,rgb(243, 245, 254) 100%);
            min-height: 100vh;
            padding: 40px 0;
        }
        
        /* Carte principale */
        .main-card {
            max-width: 670px;
            margin: 0 auto;
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            overflow: hidden;
        }
        
        /* En-tête */
        .page-header {
            background: linear-gradient(to right,#2A2F5B, #2A2F5B);
            color: white;
            padding: 25px 40px;
            position: relative;
        }
        
        .btn-back {
            font-size: 22px;
            color: white;
            transition: all 0.3s ease;
            position: absolute;
            left: 30px;
            top: 50%;
            transform: translateY(-50%);
        }
        
        .btn-back:hover {
            color: rgba(255, 255, 255, 0.8);
            transform: translateY(-50%) translateX(-3px);
        }
        
        .page-title {
            font-weight: 530;
            font-size: 28px;
            margin: 0;
            text-align: center;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            letter-spacing: 0.5px;
            color:#fff;
        }
        
        /* Corps du formulaire */
        .form-body {
            padding: 40px;
            position: relative;
        }
        
        /* Groupes de formulaire */
        .form-group {
            margin-bottom: 30px;
            position: relative;
            margin-left: 50px;
            margin-top:-30px;
        }
        
        .form-group label {
            font-weight: 600;
            color:rgb(255, 255, 255);
            font-size: 40px;
            display: block;
            margin-bottom: 18px;
            margin-top:10px;
            letter-spacing: 0.3px;
            padding-top: 12px;
        }
        
        .form-control {
            width: 85%;
            padding: 14px 16px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 15px;
            transition: all 0.3s ease;
            background-color:rgb(249, 251, 253);
        }
        
        .form-control:focus {
            border-color: #1c83f3;
            box-shadow: 0 0 0 3px rgba(28, 131, 243, 0.1);
            background-color: white;
        }
        
        /* Bouton de soumission */
        .btn-save {
            background: linear-gradient(to right, #1c83f3, #0d6efd);
            color: white;
            border: none;
            padding: 14px 28px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 560;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(28, 131, 243, 0.2);
            display: block;
            width: 100%;
            max-width: 120px;
            margin-left: auto;
            margin-top: 20px;

        }
        
        .btn-save:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(28, 131, 243, 0.3);
        }
        
        /* Icônes */
        .input-icon {
            position: absolute;
            right: 15px;
            top: 42px;
            color: #6c757d;
            font-size: 18px;
        }
        
        /* Animation */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .form-group {
            animation: fadeIn 0.4s ease forwards;
        }
        
        .form-group:nth-child(1) { animation-delay: 0.1s; }
        .form-group:nth-child(2) { animation-delay: 0.2s; }
        .form-group:nth-child(3) { animation-delay: 0.3s; }
        /* Ajoutez plus si nécessaire */
    </style>
{% endblock %}

{% block body %}
    <div class="main-container">
        <div class="main-card">
            <!-- En-tête -->
            <div class="page-header">
                <a href="{{ path('app_depense_index') }}" class="btn-back">
                    <i class="fas fa-arrow-left"></i>
                </a>
                <h1 class="page-title">Ajouter une dépense</h1>
            </div>
            
            <!-- Formulaire -->
            <div class="form-body">
                {{ include('depense/_form.html.twig') }}
                
               
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }} {# Conserve les scripts de base.html.twig #}
    <script src="{{ asset('assets/js/core/jquery-3.7.1.min.js') }}"></script>
    <script src="{{ asset('assets/js/core/popper.min.js') }}"></script>
    <script src="{{ asset('assets/js/core/bootstrap.min.js') }}"></script>
    <script src="{{ asset('assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js') }}"></script>
    <script src="{{ asset('assets/js/plugin/chart.js/chart.min.js') }}"></script>
    <script src="{{ asset('assets/js/plugin/bootstrap-notify/bootstrap-notify.min.js') }}"></script>
    <script src="{{ asset('assets/js/kaiadmin.min.js') }}"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.needs-validation');
    
    // Validation pour le Type de dépense
    const typeDepInput = document.getElementById('{{ form.typeDep.vars.id }}');
    if (typeDepInput) {
        typeDepInput.addEventListener('blur', function() {
            const value = this.value.trim();
            const errorElement = this.nextElementSibling;
            
            if (value === '') {
                showError(this, errorElement, 'Type est obligatoire');
            } else if (value.length < 2) {
                showError(this, errorElement, 'Le type doit contenir au moins 2 caractères');
            } else if (value.length > 50) {
                showError(this, errorElement, 'Le type ne peut pas dépasser 50 caractères');
            } else if (!/^[a-zA-ZÀ-ÿ\s\-']+$/u.test(value)) {
                showError(this, errorElement, 'Le type ne doit contenir que des lettres, espaces et tirets');
            } else {
                clearError(this, errorElement);
            }
        });
    }

    // Validation pour le Montant
    const montantDepInput = document.getElementById('{{ form.montantDep.vars.id }}');
    if (montantDepInput) {
        montantDepInput.addEventListener('blur', function() {
            const value = this.value.trim();
            const errorElement = this.nextElementSibling;
            
            if (value === '') {
                showError(this, errorElement, 'Le montant est obligatoire');
            } else if (isNaN(value)) {
                showError(this, errorElement, 'Le montant doit être un nombre');
            } else if (parseFloat(value) <= 0) {
                showError(this, errorElement, 'Le montant doit être positif');
            } else {
                clearError(this, errorElement);
            }
        });
    }

    // Validation pour la Date
   
const dateInput = document.getElementById('{{ form.datereceptionDep.vars.id }}');
if (dateInput) {
    dateInput.addEventListener('blur', function() {
        const value = this.value.trim();
        const errorElement = this.nextElementSibling;
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        if (value === '') {
            showError(this, errorElement, 'La date est obligatoire');
            return;
        }
        
        try {
            // Tentative de création de date à partir de la valeur
            // (fonctionne avec différents formats)
            const inputDate = new Date(value);
            
            // Vérifie si la date est valide
            if (isNaN(inputDate.getTime())) {
                showError(this, errorElement, 'Date invalide');
                return;
            }
            
            // Compare avec la date actuelle
            if (inputDate > today+1) {
                showError(this, errorElement, 'La date ne peut pas être dans le futur');
            } else {
                clearError(this, errorElement);
            }
        } catch (e) {
            showError(this, errorElement, 'Date invalide');
        }
    });
}
    // Fonction pour afficher les erreurs
    function showError(input, errorElement, message) {
        input.classList.add('is-invalid');
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }
        input.setCustomValidity(message);
    }

    // Fonction pour effacer les erreurs
    function clearError(input, errorElement) {
        input.classList.remove('is-invalid');
        if (errorElement) {
            errorElement.style.display = 'none';
        }
        input.setCustomValidity('');
    }

    // Validation globale du formulaire
    form.addEventListener('submit', function(event) {
        let isValid = true;
        
        // Déclencher les validations pour tous les champs
        if (typeDepInput) typeDepInput.dispatchEvent(new Event('blur'));
        if (montantDepInput) montantDepInput.dispatchEvent(new Event('blur'));
        if (dateInput) dateInput.dispatchEvent(new Event('blur'));
        
        // Vérifier s'il y a des erreurs
        if (form.querySelectorAll('.is-invalid').length > 0) {
            isValid = false;
        }
        
        if (!isValid) {
            event.preventDefault();
            event.stopPropagation();
        }
        
        form.classList.add('was-validated');
    }, false);
});
    </script>

{% endblock %}